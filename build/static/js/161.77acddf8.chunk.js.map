{"version":3,"file":"static/js/161.77acddf8.chunk.js","mappings":"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","sources":["components/button/Button.js","components/loading/LoadingSkeleton.js","components/movie/MovieCard.js","components/pages/MovieDetail.js","config.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({onClick, children,bgColor = \"primary\", full, className,...props}) => {\r\n  let bgColorValue = \"bg-primary\"\r\n  switch (bgColor) {\r\n    case \"primary\":\r\n      bgColorValue = \"bg-primary\"\r\n      break;\r\n    case \"secondary\":\r\n      bgColorValue = \"bg-secondary\"\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <button\r\n        className={` px-4 py-2  rounded-lg mt-auto ${full?'w-full': ''} ${bgColorValue} ${className}`}\r\n        onClick={onClick}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </button>\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst LoadingSkeleton = ({width, height, className}) => {\r\n    return (\r\n        <div className={`loading-skeleton ${className}`} style={{\r\n            width: width,\r\n            height: height,\r\n        }}>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingSkeleton;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"../button/Button\";\r\nimport PropTypes from 'prop-types'\r\nimport { withErrorBoundary } from \"react-error-boundary\";\r\nimport LoadingSkeleton from \"../loading/LoadingSkeleton\";\r\n\r\nconst MovieCard = ({ title, poster, release, rating, id }) => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"movie-card p-3 bg-slate-800 rounded-lg text-white flex flex-col select-none h-full\">\r\n      <img\r\n        className=\"w-full h-[250px] object-cover mb-3\"\r\n        src={`http://image.tmdb.org/t/p/w500/${poster}`}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"flex flex-col flex-1 mb-2\">\r\n        <h3 className=\"text-xl font-bold mb-2\">{title}</h3>\r\n        <div className=\"flex items-center justify-between text-sm opacity-50\">\r\n          <span>{release}</span>\r\n          <div>\r\n            {rating}\r\n            <FontAwesomeIcon className=\"text-yellow-500 ml-2\" icon={faStar} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Button onClick={() => {\r\n          navigate(`/movie/${id}`);\r\n          window.location.reload();\r\n        }} bgColor=\"secondary\">Watch Now</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string,\r\n  poster: PropTypes.string,\r\n  release: PropTypes.string,\r\n  rating: PropTypes.number,\r\n  id: PropTypes.number,\r\n}\r\n\r\nconst FallbackComponent = ()=>{\r\n  return <p className=\"bg-red-50 text-red-500\"> Some thing went wrong !!</p>\r\n}\r\n\r\nexport const MovieCardSkeleton = ()=>{\r\n  return (\r\n    <div className=\"movie-card p-3 bg-slate-800 rounded-lg text-white flex flex-col select-none h-full\">\r\n      \r\n      <LoadingSkeleton className=\"w-full h-[250px] object-cover mb-3\"></LoadingSkeleton>\r\n      <div className=\"flex flex-col flex-1 mb-2\">\r\n        <h3 className=\"text-xl font-bold mb-2\">\r\n          <LoadingSkeleton width=\"100%\" height=\"40px\"></LoadingSkeleton>\r\n        </h3>\r\n        <div className=\"flex items-center justify-between text-sm opacity-50\">\r\n          <span>\r\n            <LoadingSkeleton width=\"50px\" height=\"20px\"></LoadingSkeleton>\r\n          </span>\r\n          <div>\r\n            <LoadingSkeleton width=\"30px\" height=\"20px\"></LoadingSkeleton>\r\n            <FontAwesomeIcon className=\"text-yellow-500 ml-2\" icon={faStar} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <LoadingSkeleton width=\"100%\" height=\"50px\" className=\"rounded-lg\"></LoadingSkeleton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withErrorBoundary(MovieCard, {\r\n  FallbackComponent,\r\n});\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Autoplay } from \"swiper\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { apiKey, tmdbAPI } from \"../../config\";\r\nimport MovieCard from \"../movie/MovieCard\";\r\nimport styled from \"styled-components\";\r\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>\r\n\r\nconst MovieDetailStyle = styled.div`\r\n  @media screen and (max-width: 500px){\r\n    .genres{\r\n      flex-direction: column;\r\n    }\r\n  }\r\n`\r\n\r\nconst MovieDetail = () => {\r\n  const [movieDetail, setMovieDetail] = useState(null);\r\n  const { movieId } = useParams();\r\n  const getMovieDetail = async () => {\r\n    const res = await axios.get(\r\n      tmdbAPI.getMovieDetail(movieId)\r\n    );\r\n    return res.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMovieDetail().then((res) => {\r\n      setMovieDetail(res);\r\n    });\r\n  }, []);\r\n\r\n  console.log(movieDetail);\r\n  if (!movieDetail) {\r\n    return null;\r\n  }\r\n  const { backdrop_path, poster_path, title, overview, genres } = movieDetail;\r\n  return (\r\n    <MovieDetailStyle className=\"py-10\">\r\n      <div className=\"page-container relative\">\r\n        <div className=\"absolute inset-0 bg-black bg-opacity-50\"></div>\r\n        <div\r\n          className=\"w-full h-[600px] bg-cover bg-center bg-no-repeat\"\r\n          style={{\r\n            backgroundImage: `url(http://image.tmdb.org/t/p/original/${backdrop_path})`,\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"max-w-[800px] h-[400px] mx-auto -mt-[200px] relative z-10 pb-10\">\r\n        <img\r\n          className=\"w-full h-full object-cover rounded-2xl\"\r\n          src={`http://image.tmdb.org/t/p/original/${poster_path}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <h1 className=\"text-white text-center font-bold text-4xl mb-5\">\r\n        {title}\r\n      </h1>\r\n      {genres.length > 0 && (\r\n        <div className=\"genres flex items-center justify-center gap-5 text-white mb-5\">\r\n          {genres.map((item) => {\r\n            return (\r\n              <span\r\n                className=\"text-[18px] border border-primary px-3 py-2 rounded-sm\"\r\n                key={item.id}\r\n              >\r\n                {item.name}\r\n              </span>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      <div className=\"text-white max-w-[800px] mx-auto text-center leading-relaxed py-10\">\r\n        <p>{overview}</p>\r\n      </div>\r\n      \r\n      <MovieMeta type=\"credits\"/>\r\n      <MovieMeta type=\"videos\"/>\r\n      <MovieMeta type=\"similar\"/>\r\n      {/* <CastComponent />\r\n      <TrailerComponent />\r\n      <SimilarMovieComponent/> */}\r\n    </MovieDetailStyle>\r\n  );\r\n};\r\n\r\nconst MovieMeta = ({type = \"videos\"})=>{\r\n  const { movieId } = useParams();\r\n  const [data, setData] = useState();\r\n  const getData = async () => {\r\n    const res = await axios.get(\r\n      tmdbAPI.getMovieMeta(movieId, type)\r\n    );\r\n    return res.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData().then((res) => {\r\n      setData(res);\r\n    });\r\n  }, []);\r\n\r\n  if (!data) return null;\r\n\r\n  if(type===\"credits\"){\r\n    const { cast } = data;\r\n    if (!cast || cast.length <= 0) return null;\r\n    return (\r\n      <div className=\"cast-list cast page-container\">\r\n        <h2 className=\"text-center text-white text-3xl mb-10 font-bold\">Cast</h2>\r\n        <Swiper\r\n          spaceBetween={40}\r\n          slidesPerView={\"auto\"}\r\n          grabCursor={true}\r\n          modules={[Autoplay]}\r\n          autoplay={{ delay: 3000 }}\r\n        >\r\n          {cast.map((item) => {\r\n            return (\r\n              <SwiperSlide key={item.id}>\r\n                <div>\r\n                  <div className=\"h-[350px]\">\r\n                    <img\r\n                      className=\"w-full h-full object-cover rounded-lg\"\r\n                      src={`http://image.tmdb.org/t/p/original/${item.profile_path}`}\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  <h3 className=\"text-white text-xl\">{item.name}</h3>\r\n                </div>\r\n              </SwiperSlide>\r\n            );\r\n          })}\r\n        </Swiper>\r\n      </div>\r\n    );\r\n  }else{\r\n    const { results } = data;\r\n    if (!results || results.length <= 0) return null;\r\n    if(type===\"similar\"){\r\n      return (\r\n        <div className=\"movie-list page-container\"> \r\n              <h3 className=\"text-white font-bold mb-10 text-3xl\">Similar</h3>   \r\n               {/*Khong nen de thuoc tinh grid, grid-col vao the div chua swiper boi vi lam vay thi no khong chay duoc.  */}\r\n              <Swiper spaceBetween={40} slidesPerView={\"auto\"} grabCursor={true} modules={[Autoplay]} autoplay={{delay: 3000}}>\r\n                {results && results.map((movie, index)=>{\r\n                  return (<SwiperSlide key={index}>\r\n                            <MovieCard title={movie.title} poster={movie.poster_path} release={movie.release_date} rating = {movie.vote_average} id={movie.id}/>\r\n                          </SwiperSlide>)\r\n                })}\r\n              </Swiper>\r\n            </div>\r\n      )\r\n    }else{\r\n      return (\r\n        <div className=\"py-10 page-container flex flex-col gap-10\">\r\n          {results.slice(0,2).map((item) => {\r\n            return (\r\n              <div key={item.id} className=\"w-full h-full mb-3\">\r\n                <iframe \r\n                  className=\"w-full h-full object-fill aspect-video\"\r\n                  width=\"1024\"\r\n                  height=\"576\"\r\n                  src={`https://www.youtube.com/embed/${item.key}`}\r\n                  title=\"THE GODFATHER | Opening Scene | Paramount Movies\"\r\n                  frameBorder=\"0\"\r\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                  allowFullScreen\r\n                ></iframe>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst CastComponent = () => {\r\n  const { movieId } = useParams();\r\n  const [data, setData] = useState([]);\r\n  const getData = async () => {\r\n    const res = await axios.get(\r\n      tmdbAPI.getMovieMeta(movieId, \"credits\")\r\n    );\r\n    return res.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData().then((res) => {\r\n      setData(res);\r\n    });\r\n  }, []);\r\n\r\n  if (!data) return null;\r\n  const { cast } = data;\r\n  if (!cast || cast.length <= 0) return null;\r\n  return (\r\n    <div className=\"cast page-container\">\r\n      <h2 className=\"text-center text-white text-3xl mb-10 font-bold\">Cast</h2>\r\n      <Swiper\r\n        spaceBetween={40}\r\n        slidesPerView={4}\r\n        grabCursor={true}\r\n        modules={[Autoplay]}\r\n        autoplay={{ delay: 3000 }}\r\n      >\r\n        {cast.map((item) => {\r\n          return (\r\n            <SwiperSlide key={item.id}>\r\n              <div>\r\n                <div className=\"h-[350px]\">\r\n                  <img\r\n                    className=\"w-full h-full object-cover rounded-lg\"\r\n                    src={`http://image.tmdb.org/t/p/original/${item.profile_path}`}\r\n                    alt=\"\"\r\n                  />\r\n                </div>\r\n                <h3 className=\"text-white text-xl\">{item.name}</h3>\r\n              </div>\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n      </Swiper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TrailerComponent = () => {\r\n  const { movieId } = useParams();\r\n  const [data, setData] = useState();\r\n  const getData = async () => {\r\n    const res = await axios.get(\r\n      tmdbAPI.getMovieMeta(movieId, \"videos\")\r\n    );\r\n    return res.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData().then((res) => {\r\n      setData(res);\r\n    });\r\n  }, []);\r\n\r\n  if (!data) return null;\r\n  const { results } = data;\r\n  if (!results || results.length <= 0) return null;\r\n  return (\r\n    <div className=\"py-10 page-container flex flex-col gap-10\">\r\n      {results.slice(0,2).map((item) => {\r\n        return (\r\n          <div key={item.id} className=\"w-full h-full mb-3\">\r\n            <iframe \r\n              className=\"w-full h-full object-fill aspect-video\"\r\n              width=\"1024\"\r\n              height=\"576\"\r\n              src={`https://www.youtube.com/embed/${item.key}`}\r\n              title=\"THE GODFATHER | Opening Scene | Paramount Movies\"\r\n              frameBorder=\"0\"\r\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n              allowFullScreen\r\n            ></iframe>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SimilarMovieComponent = ()=>{\r\n  const { movieId } = useParams();\r\n  const [data, setData] = useState();\r\n  const getData = async () => {\r\n    const res = await axios.get(\r\n      tmdbAPI.getMovieMeta(movieId, \"similar\")\r\n    );\r\n    return res.data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData().then((res) => {\r\n      setData(res);\r\n    });\r\n  }, []);\r\n\r\n  if (!data) return null;\r\n  const { results } = data;\r\n  if (!results || results.length <= 0) return null;\r\n  console.log(results)\r\n\r\n  return (\r\n    <div className=\"movie-list page-container\"> \r\n          <h3 className=\"text-white font-bold mb-10 text-3xl\">Similar</h3>   \r\n           {/*Khong nen de thuoc tinh grid, grid-col vao the div chua swiper boi vi lam vay thi no khong chay duoc.  */}\r\n          <Swiper spaceBetween={40} slidesPerView={\"auto\"} grabCursor={true} modules={[Autoplay]} autoplay={{delay: 3000}}>\r\n            {results && results.map((movie, index)=>{\r\n              return (<SwiperSlide key={index}>\r\n                        <MovieCard title={movie.title} poster={movie.poster_path} release={movie.release_date} rating = {movie.vote_average} id={movie.id}/>\r\n                      </SwiperSlide>)\r\n            })}\r\n          </Swiper>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default MovieDetail;\r\n","export const fetcher = (url) => fetch(url).then((res) => res.json());\r\nexport const apiKey = \"8c14f06191c793a87a59fd44effbcffd\"\r\nconst endpointAPI = 'https://api.themoviedb.org/3/movie'\r\nexport const tmdbAPI = {\r\n  getMovieList: (type)=> `${endpointAPI}/${type}?api_key=${apiKey}`,\r\n  getMovieDetail: (movieId)=>`${endpointAPI}/${movieId}?api_key=${apiKey}`,\r\n  getMovieMeta: (movieId, type)=>`${endpointAPI}/${movieId}/${type}?api_key=${apiKey}`,\r\n  getMoviesInPage: (page)=>`${endpointAPI}/popular?api_key=${apiKey}&page=${page}`,\r\n  getMoviesInPageWithSearch: (searchValue, page)=>`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchValue}&page=${page}`\r\n\r\n}"],"names":["onClick","children","bgColor","full","className","props","bgColorValue","width","height","style","MovieCardSkeleton","icon","faStar","withErrorBoundary","title","poster","release","rating","id","navigate","useNavigate","src","alt","Button","window","location","reload","FallbackComponent","MovieDetailStyle","styled","MovieMeta","type","movieId","useParams","useState","data","setData","getData","axios","tmdbAPI","res","useEffect","then","cast","length","spaceBetween","slidesPerView","grabCursor","modules","Autoplay","autoplay","delay","map","item","profile_path","name","results","movie","index","poster_path","release_date","vote_average","slice","key","frameBorder","allow","allowFullScreen","movieDetail","setMovieDetail","getMovieDetail","console","log","backdrop_path","overview","genres","backgroundImage","apiKey","endpointAPI","getMovieList","getMovieMeta","getMoviesInPage","page","getMoviesInPageWithSearch","searchValue"],"sourceRoot":""}