{"version":3,"file":"static/js/234.98c7f8c9.chunk.js","mappings":"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","sources":["components/button/Button.js","components/loading/LoadingSkeleton.js","components/movie/MovieCard.js","components/pages/MoviePageV2.js","config.js","hooks/useDebounce.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({onClick, children,bgColor = \"primary\", full, className,...props}) => {\r\n  let bgColorValue = \"bg-primary\"\r\n  switch (bgColor) {\r\n    case \"primary\":\r\n      bgColorValue = \"bg-primary\"\r\n      break;\r\n    case \"secondary\":\r\n      bgColorValue = \"bg-secondary\"\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <button\r\n        className={` px-4 py-2  rounded-lg mt-auto ${full?'w-full': ''} ${bgColorValue} ${className}`}\r\n        onClick={onClick}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </button>\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst LoadingSkeleton = ({width, height, className}) => {\r\n    return (\r\n        <div className={`loading-skeleton ${className}`} style={{\r\n            width: width,\r\n            height: height,\r\n        }}>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingSkeleton;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Button from \"../button/Button\";\r\nimport PropTypes from 'prop-types'\r\nimport { withErrorBoundary } from \"react-error-boundary\";\r\nimport LoadingSkeleton from \"../loading/LoadingSkeleton\";\r\n\r\nconst MovieCard = ({ title, poster, release, rating, id }) => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"movie-card p-3 bg-slate-800 rounded-lg text-white flex flex-col select-none h-full\">\r\n      <img\r\n        className=\"w-full h-[250px] object-cover mb-3\"\r\n        src={`http://image.tmdb.org/t/p/w500/${poster}`}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"flex flex-col flex-1 mb-2\">\r\n        <h3 className=\"text-xl font-bold mb-2\">{title}</h3>\r\n        <div className=\"flex items-center justify-between text-sm opacity-50\">\r\n          <span>{release}</span>\r\n          <div>\r\n            {rating}\r\n            <FontAwesomeIcon className=\"text-yellow-500 ml-2\" icon={faStar} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Button onClick={() => {\r\n          navigate(`/movie/${id}`);\r\n          window.location.reload();\r\n        }} bgColor=\"secondary\">Watch Now</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string,\r\n  poster: PropTypes.string,\r\n  release: PropTypes.string,\r\n  rating: PropTypes.number,\r\n  id: PropTypes.number,\r\n}\r\n\r\nconst FallbackComponent = ()=>{\r\n  return <p className=\"bg-red-50 text-red-500\"> Some thing went wrong !!</p>\r\n}\r\n\r\nexport const MovieCardSkeleton = ()=>{\r\n  return (\r\n    <div className=\"movie-card p-3 bg-slate-800 rounded-lg text-white flex flex-col select-none h-full\">\r\n      \r\n      <LoadingSkeleton className=\"w-full h-[250px] object-cover mb-3\"></LoadingSkeleton>\r\n      <div className=\"flex flex-col flex-1 mb-2\">\r\n        <h3 className=\"text-xl font-bold mb-2\">\r\n          <LoadingSkeleton width=\"100%\" height=\"40px\"></LoadingSkeleton>\r\n        </h3>\r\n        <div className=\"flex items-center justify-between text-sm opacity-50\">\r\n          <span>\r\n            <LoadingSkeleton width=\"50px\" height=\"20px\"></LoadingSkeleton>\r\n          </span>\r\n          <div>\r\n            <LoadingSkeleton width=\"30px\" height=\"20px\"></LoadingSkeleton>\r\n            <FontAwesomeIcon className=\"text-yellow-500 ml-2\" icon={faStar} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <LoadingSkeleton width=\"100%\" height=\"50px\" className=\"rounded-lg\"></LoadingSkeleton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withErrorBoundary(MovieCard, {\r\n  FallbackComponent,\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { tmdbAPI } from \"../../config\";\r\nimport useDebounce from \"../../hooks/useDebounce\";\r\nimport MovieCard, { MovieCardSkeleton } from \"../movie/MovieCard\";\r\nimport useSWRInfinite from \"swr/infinite\";\r\nimport Button from \"../button/Button\";\r\nimport styled from \"styled-components\";\r\n\r\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>\r\nconst itemsPerPage = 20;\r\n\r\nconst MoviePageV2Style = styled.div`\r\n  @media screen and (max-width: 768px){\r\n    .list-movie{\r\n      grid-template-columns: repeat(3, 1fr);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 700px){\r\n    .list-movie{\r\n      grid-template-columns: repeat(2, 1fr);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 500px){\r\n    .list-movie{\r\n      grid-template-columns: repeat(1, 1fr);\r\n    }\r\n  }\r\n\r\n`\r\n\r\nconst MoviePageV2 = () => {\r\n  const fetcher = (url) => fetch(url).then((res) => res.json());\r\n  // const [movies, setMovies] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [nextPage, setNextPage] = useState(1);\r\n  const [url, setUrl] = useState(tmdbAPI.getMoviesInPage(nextPage));\r\n  const debounceValue = useDebounce(query, 500);\r\n  // Chú ý đoạn này khi làm loadmore. Sử dụng useSWRInfinity-----------------------\r\n  const { data, error, size, setSize } = useSWRInfinite(\r\n    (index) => url.replace(\"page=1\", `page=${index + 1}`),\r\n    fetcher\r\n  );\r\n\r\n  console.log(data);\r\n  const movies = data ? data.reduce((a, b) => a.concat(b.results), []) : [];\r\n  const isEmpty = data?.[0]?.results.length === 0;\r\n  const isReachingEnd =\r\n    isEmpty || (data && data[data.length - 1]?.results.length < itemsPerPage);\r\n\r\n  // ------------------------------------------------------\r\n\r\n  console.log(isReachingEnd);\r\n  useEffect(() => {\r\n    if (debounceValue) {\r\n      setUrl(tmdbAPI.getMoviesInPageWithSearch(debounceValue, nextPage));\r\n    } else {\r\n      setUrl(tmdbAPI.getMoviesInPage(nextPage));\r\n    }\r\n  }, [debounceValue, url, nextPage]);\r\n\r\n  const loading = !data && !error;\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n\r\n  // Simulate fetching items from another resources.\r\n  // (This could be items from props; or items loaded in a local state\r\n  // from an API endpoint with useEffect and useState)\r\n  const endOffset = itemOffset + itemsPerPage;\r\n\r\n  const pageCount = data\r\n    ? Math.ceil(data[0].total_results / itemsPerPage)\r\n    : 500;\r\n  // const pageCount = 500\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    const newOffset = (event.selected * itemsPerPage) % pageCount;\r\n    setItemOffset(newOffset);\r\n    setNextPage(event.selected + 1);\r\n  };\r\n\r\n  console.log(movies);\r\n  return (\r\n    <MoviePageV2Style className=\"py-10 page-container\">\r\n      <div className=\"flex mb-10\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full bg-slate-700 text-white outline-none px-5 py-3\"\r\n          placeholder=\"Enter your movie...\"\r\n          value={query}\r\n          onChange={(e) => {\r\n            setQuery(e.target.value);\r\n          }}\r\n        />\r\n        <button className=\"bg-primary text-white px-3 py-2\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            strokeWidth=\"1.5\"\r\n            stroke=\"currentColor\"\r\n            className=\"w-6 h-6\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      {loading && (\r\n        <div className=\"grid grid-cols-4 gap-10 mb-10\">\r\n          <MovieCardSkeleton></MovieCardSkeleton>\r\n          <MovieCardSkeleton></MovieCardSkeleton>\r\n          <MovieCardSkeleton></MovieCardSkeleton>\r\n          <MovieCardSkeleton></MovieCardSkeleton>\r\n        </div>\r\n      )}\r\n      {!loading && (\r\n        <div className=\"list-movie grid grid-cols-4 gap-10 mb-10\">\r\n          {movies &&\r\n            movies.map((movie) => {\r\n              return (\r\n                <MovieCard\r\n                  key={movie.id}\r\n                  poster={movie.poster_path}\r\n                  rating={movie.vote_average}\r\n                  title={movie.title}\r\n                  release={movie.release_date}\r\n                  id={movie.id}\r\n                ></MovieCard>\r\n              );\r\n            })}\r\n        </div>\r\n      )}\r\n      {/* <ReactPaginate\r\n        breakLabel=\"...\"\r\n        nextLabel=\"next >\"\r\n        onPageChange={handlePageClick}\r\n        pageRangeDisplayed={5}\r\n        pageCount={pageCount}\r\n        previousLabel=\"< previous\"\r\n        renderOnZeroPageCount={null}\r\n        className=\"pagination text-white\"\r\n      />  \r\n      \r\n      <div className=\"flex items-center justify-center gap-x-5 text-white hidden\">\r\n        <span\r\n          className=\"cursor-pointer\"\r\n          onClick={() => {\r\n            setNextPage(nextPage - 1);\r\n          }}\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            strokeWidth=\"1.5\"\r\n            stroke=\"currentColor\"\r\n            className=\"w-6 h-6\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M15.75 19.5L8.25 12l7.5-7.5\"\r\n            />\r\n          </svg>\r\n        </span>\r\n        {new Array(5).fill(0).map((item, index) => {\r\n          return (\r\n            <span\r\n              className=\"cursor-pointer text-slate-900 bg-white px-3 py-2 leading-none rounded-sm font-bold\"\r\n              onClick={() => {\r\n                setNextPage(index + 1);\r\n              }}\r\n            >\r\n              {index + 1}\r\n            </span>\r\n          );\r\n        })}\r\n        <span\r\n          className=\"cursor-pointer\"\r\n          onClick={() => {\r\n            setNextPage(nextPage + 1);\r\n          }}\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            strokeWidth=\"1.5\"\r\n            stroke=\"currentColor\"\r\n            className=\"w-6 h-6\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M8.25 4.5l7.5 7.5-7.5 7.5\"\r\n            />\r\n          </svg>\r\n        </span>\r\n      </div> */}\r\n      <div className=\"text-center\">\r\n        <Button\r\n          className={`text-center text-white ${isReachingEnd ? 'bg-slate-200': ''}`}\r\n          onClick={() => setSize(size + 1)}\r\n          disabled = {isReachingEnd}\r\n        >\r\n          Load more\r\n        </Button>\r\n      </div>\r\n    </MoviePageV2Style>\r\n  );\r\n};\r\n\r\nexport default MoviePageV2;\r\n","export const fetcher = (url) => fetch(url).then((res) => res.json());\r\nexport const apiKey = \"8c14f06191c793a87a59fd44effbcffd\"\r\nconst endpointAPI = 'https://api.themoviedb.org/3/movie'\r\nexport const tmdbAPI = {\r\n  getMovieList: (type)=> `${endpointAPI}/${type}?api_key=${apiKey}`,\r\n  getMovieDetail: (movieId)=>`${endpointAPI}/${movieId}?api_key=${apiKey}`,\r\n  getMovieMeta: (movieId, type)=>`${endpointAPI}/${movieId}/${type}?api_key=${apiKey}`,\r\n  getMoviesInPage: (page)=>`${endpointAPI}/popular?api_key=${apiKey}&page=${page}`,\r\n  getMoviesInPageWithSearch: (searchValue, page)=>`https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchValue}&page=${page}`\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nconst useDebounce = (initialValue, delay=1000) => {\r\n  const [debounceValue, setDebounceValue] = useState()\r\n  useEffect(()=>{\r\n    const timer = setTimeout(()=>{\r\n      setDebounceValue(initialValue)\r\n    }, delay)\r\n\r\n    return ()=>{\r\n      clearInterval(timer)\r\n    }\r\n\r\n  },[initialValue, delay])\r\n\r\n  return debounceValue\r\n};\r\n\r\nexport default useDebounce;"],"names":["onClick","children","bgColor","full","className","props","bgColorValue","width","height","style","MovieCardSkeleton","icon","faStar","withErrorBoundary","title","poster","release","rating","id","navigate","useNavigate","src","alt","Button","window","location","reload","FallbackComponent","MoviePageV2Style","styled","useState","query","setQuery","nextPage","tmdbAPI","url","setUrl","debounceValue","useDebounce","useSWRInfinite","index","replace","fetch","then","res","json","data","error","size","setSize","console","log","movies","reduce","a","b","concat","results","isReachingEnd","length","useEffect","loading","Math","ceil","total_results","type","placeholder","value","onChange","e","target","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","map","movie","poster_path","vote_average","release_date","disabled","apiKey","endpointAPI","getMovieList","getMovieDetail","movieId","getMovieMeta","getMoviesInPage","page","getMoviesInPageWithSearch","searchValue","initialValue","delay","setDebounceValue","timer","setTimeout","clearInterval"],"sourceRoot":""}